-------------------------------------------------------------------------------------------------------
#TextToSpeech.py

import pygame
import asyncio
import edge_tts
import os
from dotenv import dotenv_values
 
env_vars = dotenv_values(".env")
AstVoice = env_vars.get("MarkedVoice")

audio_file_path = r"Data\speech.mp3"

async def TextToAudioFile(text) -> None:
    
    if os.path.exists(audio_file_path):
        os.remove(audio_file_path)
        
    communicate = edge_tts.Communicate(text, AstVoice, pitch="+5Hz", rate="+13%")
    await communicate.save(audio_file_path)
    
def TTS(Text, func=lambda r=None: True):
    while True:
        try:
            asyncio.run(TextToAudioFile(Text))
            
            pygame.mixer.init()
            pygame.mixer.music.load(audio_file_path)
            pygame.mixer.music.play()
            
            while pygame.mixer.music.get_busy():
                if func() == False:
                    break
                pygame.time.Clock().tick(10)
            
            return True
        
        except Exception as e:
            print(f"Error in TTS: {e}")  
            
        finally:
            try:
                func(False)
                pygame.mixer.music.stop()
                pygame.mixer.quit()
            
            except Exception as e:
                print(f"Error in final block: {e}")

def TextToSpeech(Text, func = lambda r = None: True):
    Data = str(Text).split(".")
    
    responses = "The rest of the result has been printed to the chat screen, kindly check it out."
    
    if len(Data) > 4 and len(Text) >= 250:
        TTS(" ".join(Text.split(".")[0:2]) + ". " + responses, func)
        
    else:
        TTS(Text, func)
        
if __name__ == "__main__":
    while True:
        TextToSpeech(input("Enter the text: "))

-------------------------------------------------------------------------------------------------------
        
#SpeechToText.py

import speech_recognition as sr
from colorama import Fore

recognizer = sr.Recognizer()

def STT():
    while True:
        try:
            with sr.Microphone() as source:
                recognizer.adjust_for_ambient_noise(source=source, duration=0.2)
                audio = recognizer.listen(source=source)
                MyText = recognizer.recognize_google(audio)
                
                return MyText
            
        except sr.RequestError as e:
            print(e)
            
        except sr.UnknownValueError:
            print(Fore.RED + "Can't hear...")
            
if __name__ == "__main__":
    while True:
        text = STT()
        print(Fore.GREEN + ">>> ", text)
        
        if text == "exit":
            exit()


-------------------------------------------------------------------------------------------------------
#Battery and Power status

import datetime
import psutil

def getTime():
    current_time = datetime.datetime.now()
    hr = int(current_time.hour)
    mnt = int(current_time.minute)
    
    if hr >= 12:
        bd_hr = abs(hr - 12)
    
    else:
        bd_hr = hr
        
    if hr >= 0 and hr < 12:
        tag = "AM"
    
    elif hr > 12 and hr <= 24:
        tag = "PM"
        
    telltime = f"Current time is {bd_hr} {mnt} {tag}"
    
    print(telltime)
    return telltime

class BatteryStatus:
    percentage = ""
    plug = ""
    
    def __init__(self):
        self.battery = psutil.sensors_battery()
        self.percentage = self.battery.percent
        self.plug = "Plugged in." if self.battery.power_plugged else "Not plugged in."
        
    def getBatteryStatus(self):
        if self.battery is None:
            print("No battery is found.")
            
        print(f"Battery is at {self.percentage}% power and {self.plug}")
        return f"Battery is at {self.percentage}% power and {self.plug}"
    
    
if __name__ == "__main__":
    getTime()
    BatteryStatus().getBatteryStatus()
